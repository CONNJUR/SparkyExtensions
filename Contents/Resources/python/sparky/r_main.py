import sparky
import r_model as model
from subprocess import Popen, PIPE
import os



class GitRepo(object):

    def __init__(self):
        self._path = model.project().sparky_directory
        # self._path = os.path.expanduser("~") + path
    
    def check_repo(self):
        os.chdir(self._path)
        p = Popen(["git", "status"], stdout=PIPE, stderr=PIPE)
        p.wait()
        return p
    
    def dump(self, commit_message):
        p = self.check_repo()
        if p.returncode != 0:
            raise ValueError("not a git repo: " + p.stderr.read())
        os.chdir(self._path)
        try:
            add = Popen(["git", "add", "Projects/", "Save/"], stdout=PIPE, stderr=PIPE)
            add.wait()
            if add.returncode != 0:
                raise ValueError("git add failed (" + add.stderr.read() + ")")
            commit = Popen(["git", "commit", "-m", commit_message], 
                           stdout=PIPE, 
                           stderr=PIPE)
            commit.wait()
            if commit.returncode != 0:
                raise ValueError("git commit failed (" + commit.stderr.read() + ", " + commit.stdout.read() + ")")
        except Exception, e:
            print 'failure making Sparky/git repository snapshot', e
            raise




import tkutil
import sputil
import r_peaktypes as peaktypes
import simplejson as json



class Snapshot_dialog(tkutil.Dialog):

    def __init__(self, session):
        self.g = GitRepo()
        
        self.session = session
        self.title = 'Reproducibility'
        
        tkutil.Dialog.__init__(self, session.tk, self.title)
        
        br = tkutil.button_row(self.top, ('Make snapshot', self.make_snapshot))
        br.frame.pack(side='top', anchor='w')
        # TODO would like to get an enumerated list of these from somewhere
        e = tkutil.entry_field(self.top, 'Deductive reason used:', '<enter reason>', 50)
        e.frame.pack(side='top', anchor='w')
        self.message = e.variable

        br2 = tkutil.button_row(self.top, ('Set groups of selected peaks', self.set_group))
        br2.frame.pack(side = 'top', anchor = 'w')
        e2 = tkutil.entry_field(self.top, 'Group name:', '', 20, '(leave blank for name to be autogenerated)')
        e2.frame.pack(side = 'top', anchor = 'w')
        self.group = e2.variable

        br5 = tkutil.button_row(self.top, ('Set selected peaks to noise', self.set_noise))
        br5.frame.pack(side = 'top', anchor = 'w')

        br6 = tkutil.button_row(self.top, ('Set selected peaks to artifact', self.set_artifact))
        br6.frame.pack(side = 'top', anchor = 'w')
        
        self.peaktype_spectrum = m1 = tkutil.option_menu(self.top, 'Select peaktype spectrum', peaktypes.spectra.keys())
        m1.frame.pack(side='top', anchor='w')
        m1.add_callback(self.set_peaktype_spectrum)
        
        self.peaktype_dim_order = m3 = tkutil.option_menu(self.top, 'Peaktype dimension order', [])
        self.dim_order = ','.join(map(str, peaktypes.orders[1][0]))
        m3.frame.pack(side='top', anchor='w')
        m3.add_callback(self.set_peaktype_dim_order)
        
        self.peaktype = m2 = tkutil.option_menu(self.top, 'Assign peaktype', [])
        m2.frame.pack(side='top', anchor='w')
        m2.add_callback(self.assign_peaktype)
#        m1.add_callback(self.assign_peaktype)

        br9 = tkutil.button_row(self.top, ('Select signal peaks', self.select_signal_peaks))
        br9.frame.pack(side = 'top', anchor = 'w')
        e9 = tkutil.entry_field(self.top, 'Spectrum name:', '', 20)
        e9.frame.pack(side = 'top', anchor = 'w')
        self.select_signal_peaks_name = e9.variable

        br8 = tkutil.button_row(self.top, ('Automatically group peaks into GSS', self.group_peaks_into_gss))
        br8.frame.pack(side = 'top', anchor = 'w')
        e8 = tkutil.entry_field(self.top, 'Parameters:', '[[[0, 1, 0.2], [1, 2, 0.05]], "hsqc-ci2", "hncocacb"]', 40)
        e8.frame.pack(side = 'top', anchor = 'w')
        self.group_peaks_parameters = e8.variable
        
        self.changed_callback = model.session().notify_me('selection changed', self.selection_changed)



    def selection_changed(self):
        rs = []
        for pk in model._selected_peaks():
            rs.extend(pk.resonances())
        gs, _, gs_info = model.resonance_map(set(rs))
        if len(gs_info) == 1:
            k = gs_info.keys()[0]
            self.group_name.set(k)
            self.group_name_aatype.set(k)
            self.res_group_name.set(k)
            self.set_resonance.remove_all_entries()
            for x in gs_info[k]['resonances'].keys():
                self.set_resonance.add_entry(x)

    def make_snapshot(self):
        self.g.dump(self.message.get())
    
    def set_group(self):
        name = self.group.get()
        if name == '':
            model.set_new_group()
        else:
            model.set_group(name)
    
    def set_noise(self):
        model.set_noise()
    
    def set_artifact(self):
        model.set_artifact()
    
    def set_peaktype_spectrum(self, spectrum):
        self.peaktype.remove_all_entries()
        for pt in peaktypes.spectra[spectrum]:
            self.peaktype.add_entry(','.join(pt))
        self.peaktype_dim_order.remove_all_entries()
        for o in peaktypes.orders[len(pt) - 1]:
            self.peaktype_dim_order.add_entry(','.join(map(str, o)))
    
    def set_peaktype_dim_order(self, order):
        self.dim_order = order.split(',')
    
    def assign_peaktype(self, peaktype):
        pt = peaktype.split(',')
        my_pt = [y for (_, y) in sorted(zip(self.dim_order, pt), key=lambda x: x[0])]
        model.assign_peaktype(my_pt)

    def select_signal_peaks(self):
        name = self.select_signal_peaks_name.get()
        model.select_signal_peaks(name)

    def group_peaks_into_gss(self):
        # what a hack with JSON here
        params = json.loads(self.group_peaks_parameters.get())
        model.group_peaks_into_gss(*params)



def show_snapshot_dialog(session):
    d = sputil.the_dialog(Snapshot_dialog, session)
    d.show_window(1)
